#!/bin/bash
#
# tcos helper utility to:
# - build
# - upload
#
# Copyright (C) 2014 openthinclient GmbH All Rights Reserved.
#
# Author: Steffen HÃ¶nig
#
#

# includes

#. /usr/share/tcos-dev/functions/ini_parser
#. /usr/share/tcos-dev/functions/usage

. ~/.local/share/tcos-dev/functions/ini_parser
. ~/.local/share/tcos-dev/functions/usage

VERSION=2.1
ARCH=i386


# config file: ~/.tcosconfig > /etc/tcos-dev/tcosconfig

[ -f ~/.tcosconfig ] && INI_FILE="$HOME/.tcosconfig" || INI_FILE="/etc/tcos-dev/tcosconfig"

function config() {

    while [ "$#" -ge 1 ];do
	case $1 in
	    get)
		shift
		[ "$1" = "--server" ] && section="$2" || section=$(default_section $INI_FILE)
		eval $(read_section $INI_FILE $section)
		echo -e "server:\t$section\ndir:\t$dir\nremote:\t$remote"
		exit 0
		;;
	    set)
		shift
		#todo:
		exit 0
		;;
	    *)
		shift
		#todo
		;;
	esac
    done
exit 65
}

function build() {
    fakeroot=""
    build_args=""

    while [ "$#" -ge 1 ];do
    	case $1 in
	    --base)
		shift
		fakeroot="-rsudo"
		;;
	    --test)
		shift
		#todo
		;;
	    .)
		shift
		;;
	    *)
		shift
		build_args="${build_args} ${key}"
		;;
	esac
    done
    dpkg-buildpackage ${fakeroot} -us -uc -a${ARCH} $build_args
    # copy changelog
    package_name=$(head -1 debian/changelog | awk '{print $1}')
    if [ "$package_name" ]; then
	cp debian/changelog ../"$package_name".changelog
    fi

    exit 0
}

function clean(){
    #todo:all
    :
}

function update_metadata() {
    remote=$1
    path=$2
    prefix=$3

    #private or public repo? look for --hash
    if [ "$hash"];then
	ssh_path="$path/${prefix}_$hash"
	echo -e "Insert the following line to your sources.list:\ndeb ${remote}/${prefix}_${HASH} ./\n"
    else
	ssh_path="$path"
    ssh $remote "cd $ssh_path; apt-ftparchive packages . > Packages; gzip -9cf < Packages > Packages.gz ; \
			       bzip2 -9cf < Packages > Packages.bz2; \
			       apt-ftparchive sources . > Sources; gzip -9cf < Sources > Sources.gz; \
			       bzip2 -9cf < Sources > Sources.bz2; \
			       apt-ftparchive release . > Release \
	        "
    fi
}

function upload_file() {
    remote=$1
    path=$2
    file=$3
    prefix=$4

    #private or public repo? look for --hash
    if [ "$hash" ];then
	# stream the file over a pipe to ssh
	cat $file | ssh $remote "mkdir -p $path/${prefix}_$hash; cat >> $path/${prefix}_$hash/`basename $file`"
    else
	cat $file | ssh $remote "cat >> $path/$(basename $file)"
    fi
}

function upload() {
   upload_args=""

   #get default values
   section=$(default_section $INI_FILE)
   eval $(read_section $INI_FILE $section)

   while [ "$#" -ge 1 ];do
      case $1 in
	  --server)
	      shift
	      #override default values
	      eval $(read_section $INI_FILE $1)
	      ;;
	  --hash)
	      shift
	      hash="$1"
	      ;;
	  *)
	      upload_args="${upload_args} ${1}"
	      shift
	      ;;
      esac
  done
  debs=${upload_args}
  for d in $debs;do
      if echo $d | /bin/grep -qs "\.deb$";then
	  bn=$(basename $d)
	  dn=$(dirname $d)
	  base=${bn%%_*b}
	  changelog=${dn}/${base}.changelog
	  version=$(grep -m 1 -i $base $changelog | awk '{print $2}' | tr -d '()')
	  changes=${dn}/${base}_${version}_${ARCH}.changes
	  dsc=${dn}/${base}_${version}.dsc
	  tgz=${dn}/${base}_${version}.tar.gz
	  echo -e "Uploading:\n"
	  for f in $d $dsc $changes $changelog $tgz;do
	      echo -e "--> $f\n"
	      upload_file "$remote" "$dir" "$f" "$base"
	  done
	  echo -e "Generating: Packages.gz\n"
	  update_metadata "$remote" "$dir" "$base"
      fi
  done
}

# build or upload? (or config?)

key="$1"

case $key in
    build)
	shift
	[ -z "$1" ] && usage_build
	build "$@"
	;;
    config)
	shift
	[ -z "$1" ] && usage_config
	config "$@"
	;;
    upload)
	shift
	[ -z "$1" ] && usage_upload
	upload "$@"
	;;
    -v|--version|version)
	echo -e "$(basename $0):\tv$VERSION"
	exit 65
	;;
    *)
	usage
	;;
esac
