#!/bin/bash
#
# tcos helper utility to:
# - build
# - upload
#
# Copyright (C) 2014 openthinclient GmbH All Rights Reserved.
#
# Author: Steffen HÃ¶nig
#
#
[ "$DEBUG" = "yes" ] && set -x

VERSION=$(dpkg -l | grep -i tcos-dev | awk '{ print $3 }');VERSION=${VERSION:-"latest"}
ARCH=${ARCH:-i386}

# includes

[ "$DEV" = "true" ] && set -x && PRE="$HOME/.local/share" || PRE="/usr/share"

. "$PRE"/tcos-dev/functions/ini_parser
. "$PRE"/tcos-dev/functions/genpackage
. "$PRE"/tcos-dev/functions/usage

# config file: ~/.tcosconfig > /etc/tcos-dev/tcosconfig

[ -f ~/.tcosconfig ] && INI_FILE="$HOME/.tcosconfig" || INI_FILE="/etc/tcos-dev/tcosconfig"

DEFAULT_SECTION=$(default_section $INI_FILE)

################################################################################


function config() {

    while [ "$#" -ge 1 ];do
	case $1 in
	    get)
		shift
		[ "$1" = "--server" ] && section="$2" || section=$DEFAULT_SECTION
		eval $(read_section $INI_FILE $section)
		echo -e "server:\t$section\ndir:\t$dir\nremote:\t$remote"
		exit 0
		;;
	    set)
		shift
		#todo:
		exit 0
		;;
	    *)
		shift
		#todo
		;;
	esac
    done
exit 65
}

function build() {
    [ -d debian ] || (echo "./debian is missing. Cannot continue to build. Aborting. " && exit 1)
    fakeroot="-rfakeroot"
    build_args=""
    section=$DEFAULT_SECTION
    eval $(read_section $INI_FILE $section)

    while [ "$#" -ge 1 ];do
    	case $1 in
	    --base)
		shift
		fakeroot="-rfakeroot -u"
		;;
	    --server)
		shift
		#override default values
		eval $(read_section $INI_FILE $1)
		shift
		;;
	    --test)
		shift
		#todo
		test="true"
		shift
		;;
	    .)
		shift
		;;
	    *)
		shift
		build_args="${build_args} ${key}"
		;;
	esac
    done
    # empty generated debian/files file
    package_name=$(head -1 debian/changelog | awk '{print $1}')
    echo $package_name
    [ -f debian/files ] && :>  debian/files
    # quirks
    rm -rf debian/tempcopy
    mkdir -p package-rootfs/opt/$package_name
    dpkg-buildpackage "${fakeroot}" -us -uc -a${ARCH} $build_args
    # copy changelog
    if [ -n "$package_name" ]; then
	cp debian/changelog ../"$package_name".changelog
    fi
    if [ "$test" ];then
	rsync -vaP schema/ ${remote}:/opt/openthinclient/server/default/data/nfs/root/schema/ || /bin/true
	rsync -vaP debian/${package_name}/sfs/package/${package_name}.sfs ${remote}:/opt/openthinclient/server/default/data/nfs/root/sfs/package || /bin/true
    fi


    exit 0
}

function clean(){
    #todo:all
    #get packagename
    current_dir=$(pwd)
    package_full=$(basename "$current_dir")
    package=${package_full%-*}

    [ -d ./debian/tempcopy ] && [ -d ./debian/"$package" ] || exit 1
    set -x
    rm -rf debian/tempcopy
    rm -rf debian/"$package"
}

function update_metadata() {
    remote=$1
    path=$2
    prefix=$3
    http=$4

    #private or public repo? look for --hash
    if [ "$hash" ];then
	ssh_path="$path/${prefix}_$hash"
	echo -e "Insert the following line to your sources.list:\ndeb ${http}/${prefix}_${hash} ./\n"
    else
	ssh_path="$path"
    fi

    ssh $remote "cd $ssh_path; apt-ftparchive packages . > Packages; gzip -9cf < Packages > Packages.gz ; \
			       bzip2 -9cf < Packages > Packages.bz2; \
			       apt-ftparchive sources . > Sources; gzip -9cf < Sources > Sources.gz; \
			       bzip2 -9cf < Sources > Sources.bz2; \
			       apt-ftparchive release . > Release \
	        "
}

function upload_file() {
    remote=$1
    path=$2
    file=$3
    file_base=$(basename $file)
    prefix=$4

    #private or public repo? look for --hash
    if [ "$hash" ];then
	# stream the file over a pipe to ssh
	cat $file | ssh $remote "mkdir -p $path/${prefix}_$hash;\
	    			 [ -f $path/${prefix}_$hash/$file_base ] && rm -rf $path/${prefix}_$hash/$file_base;\
	    			 cat >> $path/${prefix}_$hash/$file_base"
    else
	cat $file | ssh $remote "[ -f $path/$file_base ] && rm -rf $path/$file_base;\
	                         cat >> $path/$(basename $file)"
    fi
}

function upload() {
   upload_args=""

   #get default values
   section=$DEFAULT_SECTION
   eval $(read_section $INI_FILE $section)

   while [ "$#" -ge 1 ];do
      case $1 in
	  --server)
	      shift
	      #override default values
	      eval $(read_section $INI_FILE $1)
	      shift
	      ;;
	  --hash)
	      shift
	      hash="$1"
	      shift
	      ;;
	  *)
	      upload_args="${upload_args} ${1}"
	      shift
	      ;;
      esac
  done
  debs=${upload_args}
  for d in $debs;do
      if echo $d | /bin/grep -qs "\.deb$";then
    	  bn=$(basename $d)
    	  dn=$(dirname $d)
    	  # split debian packages with the help of IFS at "_"
    	  oIFS="$IFS"
    	  IFS='_'; bn_arr=($bn)
    	  IFS="$oIFS"
    	  upstream_version="${bn_arr[1]%-*}"
    	  package_version="${bn_arr[1]##*-}"
    	  base="${bn_arr[0]}"
    	  changelog=${dn}/${base}.changelog
    	  changes=$(ls ${dn}/${base}_${upstream_version}-${package_version}*changes)
    	  dsc=${dn}/${base}_${upstream_version}-${package_version}.dsc
    	  tgz=${dn}/${base}_${upstream_version}-${package_version}.tar.gz
    	  for f in $d $dsc $changes $changelog $tgz;do
    	     [ -f "$f" ] || (echo "$f is missing. Aborting."  && exit 1)
          done
          if [ "$hash" ]; then
              echo -e "Uploading: to ${remote}:${dir}/${base}_$hash/ \n"
              rsync -av $d $dsc $changes $changelog $tgz ${remote}:${dir}/${base}_${hash}/
          else
              echo -e "Uploading: to ${remote}:$dir/${base}/ \n"
              rsync -av $d $dsc $changes $changelog $tgz ${remote}:${dir}/
          fi
    	  echo -e "Generating: Packages.gz\n"
      fi
    	  update_metadata "$remote" "$dir" "$base" "$http"
  done
}

# build or upload? (or config?)

key="$1"

case $key in
    build)
	shift
	[ -z "$1" ] && usage_build
	build "$@"
	;;
    clean)
	shift
	clean
	;;
    config)
	shift
	[ -z "$1" ] && usage_config
	config "$@"
	;;
    genpackage)
	shift
	[ -z "$1" ] && usage_genpackage
	genpackage "$@"
	;;
    upload)
	shift
	[ -z "$1" ] && usage_upload
	upload "$@"
	;;
    -v|--version|version)
	echo -e "$(basename $0):\t$VERSION"
	exit 65
	;;
    *)
	usage
	;;
esac
